// prevents collision when using in token secrets
args: {
	// Redis replicas per leader. Default (0).
	replicas: 0

	// Redis leader count. Setting this value 3 and above will configure Redis cluster. Default(1)
	leaders: 1

	// User provided configuration for leader and cluster servers
	leaderConfig: {}

	// User provided configuration for leader and cluster servers
	followerConfig: {}
}

// Leaders
for l in std.range(args.leaders) {
	// Followers
	for f in std.range(args.replicas + 1) {
		containers: {
			"redis-\(l)-\(f)": {
				image: "redis:7-alpine"
				cmd: ["/etc/redis/6379.conf"]
				if args.leaders > 1 {
					ports: internal: "16379:16379/tcp"
				}
				ports: expose: "6379:6379/tcp"
				env: {
					"REDISCLI_AUTH": "secret://redis-auth/token"
				}
				if f == 0 {
					files: {
						"/etc/redis/6379.conf": "secret://redis-leader-config/template"
					}
				}
				if args.leaders == 1 && f > 0 {
					files: {
						"/etc/redis/6379.conf": "secret://redis-follower-config/template"
					}
				}
				dirs: {
					"/data":          "volume://redis-data-dir-\(l)-\(f)"
					"/acorn/scripts": "./scripts"
				}
				probes: [
					{
						type:                "readiness"
						initialDelaySeconds: 5
						periodSeconds:       5
						timeoutSeconds:      2
						successThreshold:    1
						failureThreshold:    5
						exec: command: ["/bin/sh", "/acorn/scripts/redis-ping-local-readiness.sh", "1"]
					},
					{
						type:                "liveness"
						initialDelaySeconds: 5
						periodSeconds:       5
						timeoutSeconds:      6
						successThreshold:    1
						failureThreshold:    5
						exec: command: ["/bin/sh", "/acorn/scripts/redis-ping-local-liveness.sh", "5"]
					},
				]
			}
		}

		volumes: "redis-data-dir-\(l)-\(f)": accessModes: ["readWriteOnce"]
	}
}

secrets: {
	"redis-auth": {
		type: "token"
		params: length: 32
	}
	"redis-leader-config": {
		type: "template"
		data: template: std.join([ for i, v in leaderConfigTemplate {"\(i) \(v)"}], "\n")
	}
	if args.replicas != 0 {
		"redis-follower-config": {
			type: "template"
			data: template: std.join([ for i, v in followerConfigTemplate {"\(i) \(v)"}], "\n")
		}
	}

	// Provides user a target to bind in secret data
	"user-secret-data": type: "opaque"
}

if args.leaders > 1 {
	jobs: {
		"redis-init-cluster": {
			image: "redis:7-alpine"
			env: {
				"REDISCLI_AUTH": "secret://redis-auth/token"
			}
			dirs: {
				"/acorn/scripts": "./scripts"
			}
			cmd: [
				"/acorn/scripts/cluster-init-script.sh",
				"\(args.leaders)",
				"\(args.replicas)",
				"\(localData.serverCount)",
			]
		}
	}
	localData: redis: static: leaderConfig: localData.redis.static.leaderConfig & {
		"cluster-enabled":     "yes"
		"cluster-config-file": "nodes.conf"
		appendonly:            "yes"
	}
	localData: redis: leaderConfig: localData.redis.leaderConfig & {
		"cluster-node-timeout": 5000
	}
}

let leaderConfigTemplate = localData.redis.static.commonConfig & localData.redis.static.leaderConfig & std.merge(args.leaderConfig, localData.redis.leaderConfig)
let followerConfigTemplate = localData.redis.static.commonConfig & localData.redis.static.followerConfig & std.merge(localData.redis.followerConfig, args.followerConfig)
localData: {
	redis: {
		leaderConfig: "tcp-keepalive": 60
		followerConfig: {}
		static: {
			if args.replicas != 0 {
				followerConfig: {
					slaveof:           "redis-0-0 6379"
					"slave-read-only": "yes"
				}
			}
			commonConfig: {
				requirepass: "${secret://redis-auth/token}"
				masterauth:  "${secret://redis-auth/token}"
				port:        6379
				dir:         "/data"
				"######":    " ROLE CONFIG ######"
			}
			leaderConfig: {}
			followerConfig: {}
		}
	}
	serverCount: args.leaders + (args.leaders * args.replicas)
}
