args: {
	// Cache backend for blobdescriptor default 'inmemory' you can also use 'redis'
	storageCache: "inmemory"

	// Disable metrics endpoint
	disableMetrics: false

	// This is the username allowed to login and push items to the registry. Default is randomly generated and can be obtained from the secret"
	htpasswdUsername: ""

	// Number of registry containers to run.
	scale: 1

	// Provide the complete storage configuration blob in registry config format.
	storageConfig: {}

	// Provide the complete auth configuration blob in registry config format.
	authConfig: {}

	// Provide additional configuration for the registry
	extraRegistryConfig: {}
}

profiles: {
	build: {
		// So the redis Acorn Image is built and packaged into this Acorn
		storageCache: "redis"
	}
}

containers: {
	registry: {
		image:  "registry:2.8.1"
		scale:  args.scale
		ports: expose: [
            "5000:5000/http",
		    if !args.disableMetrics {
			    "metrics:5001/http",
            }
        ]
		files: {
			"/auth/htpasswd":                  "secret://generated-htpasswd/content?onchange=no-action"
			"/etc/docker/registry/config.yml": "secret://registry-config/template?onchange=redeploy"
		}
		probes: ready: "http://localhost:5000"

		if len(args.storageConfig) == 0 {
			dirs: {
				"/var/lib/registry": "volume://registry-data"
			}
		}
	}
	if args.storageCache == "redis" {
		redis: {
			image: "redis:7-alpine"
			ports: "6379/tcp"

		}
	}
}


if args.storageCache == "redis" {
	containers: {
	    redis: {
	    	image: "redis:7-alpine"
	    	ports: "6379/tcp"
	    	env: {
				REDISCLI_AUTH: "secret://redis-auth/token"
			}	
	    }
	}
	secrets: {
		"redis-auth": {
			type: "token"
			params: length: 32
		}
	}
}

jobs: {
	"htpasswd-create": {
		env: {
			"USER": "secret://registry-user-creds/username"
			"PASS": "secret://registry-user-creds/password"
		}
		entrypoint: "/bin/sh -c"
		image:      "httpd:2"
		// Output of a generated secret needs to be placed in the file /run/secrets/output.
		cmd: ["htpasswd -Bbc /run/secrets/output $USER $PASS"]
	}
}

if len(args.storageConfig) == 0 {
	volumes: {
		"registry-data": {}
	}	
}

secrets: {
	"registry-user-creds": {
		type: "basic"
		data: {
			username: "\(args.htpasswdUsername)"
		}
	}
	"generated-htpasswd": {
		type: "generated"
		params: {
			job: "htpasswd-create"
		}
	}
	"registry-config": {
		type: "template"
		data: {template: std.toYAML(regConfig)}
	}
	"registry-http-secret": type: "token"

	// Provides user a target to bind in secret data
	"user-secret-data": type: "opaque"
}

let regConfig = localData.static.registryConfig & localData.variable.registryConfig
localData: {
	storageDriver: std.ifelse(len(args.storageConfig) != 0, args.storageConfig, {
		filesystem: rootdirectory: "/var/lib/registry"
	})

	authConfig: std.ifelse(len(args.authConfig) != 0, args.authConfig, {
		htpasswd: {
			realm: "Registry Realm"
			path:  "/auth/htpasswd"
		}
	})

	registryConfig: {}
	static: registryConfig: {
		version: "0.1"
		log: fields: service:           "registry"
		storage: cache: blobdescriptor: args.storageCache
		storage: storageDriver
		auth:    authConfig
		http: {
			addr:   ":5000"
			secret: "${secret://registry-http-secret/token}"
			headers: {
				"X-Content-Type-Options": ["nosniff"]
			}
		}
		health: {
			storagedriver: {
				enabled:   true
				interval:  "10s"
				threshold: 3
			}
		}
	} 
	variable: registryConfig: std.merge(localData.registryConfig, args.extraRegistryConfig)

	if args.storageCache == "redis" {
		static: registryConfig: redis: {
				addr:         "redis:6379"
				db:           0
		} 
		registryConfig: redis: {
			password:     "${secret://redis-auth/token}"
			dialtimeout:  "10ms"
			readtimeout:  "10ms"
			writetimeout: "10ms"
			pool: {
				maxidle:     16
				maxactive:   64
				idletimeout: "300s"
			}
		}
	}

	if !args.disableMetrics {
		static: registryConfig: http: debug: {
			addr: ":5001"
			prometheus: {
				enabled: true
				path:    "/metrics"
			}
		}
	}
}
