args: {
    // Specify whether MongoDB instance is a standalone or replica set
    isReplicaSet: false
    // Custom user to be created during the initialization
    dbUserName: ""
    // Custom database to be created during the initialization
    dbName: "acorn"
    replicas: 1
    // Enable diagnostic mode
    diagnosticMode: false
    // Enable authentication
    authEnabled: true
    // Run arbiter node
    // Mongodb additional command line flags
    extraFlags: ""
    arbiterEnabled: false
    // Arbiter additional command line flags
    arbiterExtraFlargs: ""
    // Run hidden node
    hiddenReplicas: 1
    // Hidden node additional command line flags
    hiddenExtraFlargs: ""
    // App installed namespace. NOTE(joseb): before fieldRef is supported,
    appNamespace: "mongo"
    // Backup Schedule
    backupSchedule: ""
    // Specify to use oplog for taking a point-in-time snapshot
    ptrBackup: false
    // Collection name to backup
    backupCollection: ""
    // DB name to backup
    backupDB: ""
    // Backup name to restore
    backupToRestore: ""
    imageName: "bitnami/mongodb:5.0.12"
}

profiles: {
    dev: {
        backupSchedule:    "*/3 * * * *"
        isReplicaSet: false
        arbiterEnabled: false
    }
    prod: {
        backupSchedule:    "*/30 * * * *"
        isReplicaSet: true
        arbiterEnabled: true
        replicas: 3
        ptrBackup: true
    }
}

localData: {
    if args.isReplicaSet {
        mongodbServerList: std.join([for i in std.range(args.replicas) {"mongodb-\(i).\(args.appNamespace).svc.cluster.local:27017"}], ",")
    }
    if !args.isReplicaSet {
        mongodbServerList: "mongodb-0.\(args.appNamespace).svc.cluster.local:27017"
    }
}

// Standalone instance
if !args.isReplicaSet {
    containers: {
        "mongodb-0": {
            image: "\(args.imageName)"
            ports: {
                expose: "27017:27017"
            }
            env: {
                "MONGODB_PORT_NUMBER": "27017"
                "ALLOW_EMPTY_PASSWORD":               "\(!args.authEnabled)"
                "MONGODB_USERNAME": "secret://db-user-credentials/username?onchange=no-action"
                "MONGODB_DATABASE": "\(args.dbName)"
                if args.authEnabled {
                    "MONGODB_ROOT_USER": "secret://root-credentials/username?onchange=no-action"
                    "MONGODB_ROOT_PASSWORD": "secret://root-credentials/password?onchange=no-action"
                    "MONGODB_PASSWORD": "secret://db-user-credentials/password?onchange=no-action"
                }
                if args.extraFlags != "" {
                    "MONGODB_EXTRA_FLAGS": "\(args.extraFlags)"
                }
            }
            if args.diagnosticMode {
                command: ["sleep"]
                args: ["infinity"]
            }
            if !args.diagnosticMode {
                probes: [
                    {
                        type:                "liveness"
                        initialDelaySeconds: 30
                        periodSeconds:       20
                        timeoutSeconds:      10
                        successThreshold:    1
                        failureThreshold:    6
                        exec: command: [
                            "bash",
                            "/acorn/scripts/ping.sh"
                        ]
                    },
                    {
                        type:                "readiness"
                        initialDelaySeconds: 5
                        periodSeconds:       10
                        timeoutSeconds:      5
                        successThreshold:    1
                        failureThreshold:    6
                        exec: command: [
                            "bash",
                            "/acorn/scripts/ping.sh"
                        ]
                    }
                ]
            }
            dirs: {
                "/acorn/scripts": "./scripts"
                "/bitnami/mongodb": "volume://mongodb-data-0"
            }
        }
    }
    volumes: {
        "mongodb-data-0": {}
    }
}

// Replicaset instance
if args.isReplicaSet {
    for i in std.range(args.replicas) {
        containers: {
            "mongodb-\(i)": {
                image: "\(args.imageName)"
                ports: {
                    expose: "27017:27017"
                }
                env: {
                    "MY_POD_NAMESPACE": "\(args.appNamespace)"
                    "MONGODB_INITIAL_PRIMARY_HOST":  "mongodb-0.\(args.appNamespace).svc.cluster.local"
                    "MONGODB_REPLICA_SET_NAME":      "rs0"
                    "MONGODB_ADVERTISED_HOSTNAME": "mongodb-\(i).\(args.appNamespace).svc.cluster.local"
                    "MONGODB_PORT_NUMBER": "27017"
                    "MY_POD_INDEX": "\(i)"
                    "MONGODB_SERVER_LIST": "\(localData.mongodbServerList)"
                    "ALLOW_EMPTY_PASSWORD":               "\(!args.authEnabled)"
                    "MONGODB_USERNAME": "secret://db-user-credentials/username?onchange=no-action"
                    "MONGODB_DATABASE": "\(args.dbName)"
                    if args.authEnabled {
                        "MONGODB_ROOT_USER": "secret://root-credentials/username?onchange=no-action"
                        "MONGODB_ROOT_PASSWORD": "secret://root-credentials/password?onchange=no-action"
                        "MONGODB_PASSWORD": "secret://db-user-credentials/password?onchange=no-action"
                        "MONGODB_REPLICA_SET_KEY": "secret://replicaset-key/key?onchange=no-action"
                    }
                    if args.extraFlags != "" {
                        "MONGODB_EXTRA_FLAGS": "\(args.extraFlags)"
                    }
                }
                dependsOn: [ for i in std.range(i) {"mongodb-\(i)"}]
                if args.diagnosticMode {
                    command: ["sleep"]
                    args: ["infinity"]
                }
                if !args.diagnosticMode {

                    command: ["/acorn/scripts/setup.sh"]
                    probes: [
                        {
                            type:                "liveness"
                            initialDelaySeconds: 30
                            periodSeconds:       20
                            timeoutSeconds:      10
                            successThreshold:    1
                            failureThreshold:    6
                            exec: command: [
                                "bash",
                                "/acorn/scripts/ping.sh"
                            ]
                        },
                        {
                            type:                "readiness"
                            initialDelaySeconds: 5
                            periodSeconds:       10
                            timeoutSeconds:      5
                            successThreshold:    1
                            failureThreshold:    6
                            exec: command: [
                                "bash",
                                "/acorn/scripts/ping.sh"
                            ]
                        }
                    ]
                }
                dirs: {
                    "/acorn/scripts": "./scripts"
                    "/bitnami/mongodb": "volume://mongodb-data-\(i)"
                }
            }
        }
        volumes: {
            "mongodb-data-\(i)": {}
        }
    }
}

// Arbiter
if args.isReplicaSet && args.arbiterEnabled {
    containers: {
        "arbiter-0": {
            image: "\(args.imageName)"
            ports: {
                expose: "27017:27017"
            }
            env: {
                "MY_POD_NAMESPACE": "\(args.appNamespace)"
                "MONGODB_REPLICA_SET_MODE": "arbiter"
                "MONGODB_INITIAL_PRIMARY_HOST":  "mongodb-0.\(args.appNamespace).svc.cluster.local"
                "MONGODB_REPLICA_SET_NAME":      "rs0"
                "MONGODB_ADVERTISED_HOSTNAME": "arbiter-0.\(args.appNamespace).svc.cluster.local"
                "ALLOW_EMPTY_PASSWORD":               "\(!args.authEnabled)"
                if args.authEnabled {
                    "MONGODB_INITIAL_PRIMARY_ROOT_USER": "secret://root-credentials/username?onchange=no-action"
                    "MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD": "secret://root-credentials/password?onchange=no-action"
                    "MONGODB_REPLICA_SET_KEY": "secret://replicaset-key/key?onchange=no-action"
                }
                if args.arbiterExtraFlargs != "" {
                    "MONGODB_EXTRA_FLAGS": "\(args.arbiterExtraFlargs)"
                }
            }
            if args.diagnosticMode {
                command: ["sleep"]
                args: ["infinity"]
            }
            if !args.diagnosticMode {
                probes: [
                    {
                        type:                "liveness"
                        initialDelaySeconds: 30
                        periodSeconds:       20
                        timeoutSeconds:      10
                        successThreshold:    1
                        failureThreshold:    6
                        tcp: {
                            url: "tcp://localhost:27017"
                        }
                    },
                    {
                        type:                "readiness"
                        initialDelaySeconds: 5
                        periodSeconds:       20
                        timeoutSeconds:      10
                        successThreshold:    1
                        failureThreshold:    6
                        tcp: {
                            url: "tcp://localhost:27017"
                        }
                    }
                ]
            }
        }
    }
}

// Hidden nodes
if args.isReplicaSet && args.hiddenReplicas > 0 {
    for i in std.range(args.hiddenReplicas) {
        containers: {
            "hidden-\(i)": {
                image: "\(args.imageName)"
                ports: {
                    expose: "27017:27017"
                }
                env: {
                    "MY_POD_NAMESPACE": "\(args.appNamespace)"
                    "MONGODB_REPLICA_SET_MODE": "hidden"
                    "MONGODB_INITIAL_PRIMARY_HOST":  "mongodb-0.\(args.appNamespace).svc.cluster.local"
                    "MONGODB_REPLICA_SET_NAME":      "rs0"
                    "MONGODB_ADVERTISED_HOSTNAME": "hidden-\(i).\(args.appNamespace).svc.cluster.local"
                    "ALLOW_EMPTY_PASSWORD":               "\(!args.authEnabled)"
                    "MONGODB_USERNAME": "secret://db-user-credentials/username?onchange=no-action"
                    "MONGODB_DATABASE": "secret://db-user-credentials/password?onchange=no-action"
                    if args.authEnabled {
                        "MONGODB_ROOT_USER": "secret://root-credentials/username?onchange=no-action"
                        "MONGODB_ROOT_PASSWORD": "secret://root-credentials/password?onchange=no-action"
                        "MONGODB_PASSWORD": "\(args.dbName)"
                        "MONGODB_REPLICA_SET_KEY": "secret://replicaset-key/key?onchange=no-action"
                    }
                    if args.hiddenExtraFlargs != "" {
                        "MONGODB_EXTRA_FLAGS": "\(args.hiddenExtraFlargs)"
                    }
                }
                dependsOn: [ for i in std.range(args.replicas) {"mongodb-\(i)"}]
                if args.diagnosticMode {
                    command: ["sleep"]
                    args: ["infinity"]
                }
                if !args.diagnosticMode {
                    command: ["/acorn/scripts/setup-hidden.sh"]
                    probes: [
                        {
                            type:                "liveness"
                            initialDelaySeconds: 30
                            periodSeconds:       20
                            timeoutSeconds:      10
                            successThreshold:    1
                            failureThreshold:    6
                            exec: command: [
                                "bash",
                                "/acorn/scripts/ping.sh"
                            ]
                        },
                        {
                            type:                "readiness"
                            initialDelaySeconds: 5
                            periodSeconds:       20
                            timeoutSeconds:      10
                            successThreshold:    1
                            failureThreshold:    6
                            exec: command: [
                                "bash",
                                "/acorn/scripts/ping.sh"
                            ]
                        }
                    ]
                }
                dirs: {
                    "/acorn/scripts": "./scripts"
                    "/bitnami/mongodb": "volume://hidden-data-\(i)"
                }
            }
        }
        volumes: {
            "hidden-data-\(i)": {}
        }
    }
}

// Job to create a backup user
if args.backupSchedule != "" || args.backupToRestore != "" {
    jobs: {
        "create-backup-user": {
            image: "\(args.imageName)"
            command: ["/acorn/scripts/create_backup_user.sh"]
            dirs: {
                "/acorn/scripts": "./scripts"
            }
            env: {
                "MONGODB_SERVER_LIST": "\(localData.mongodbServerList)"
                "ALLOW_EMPTY_PASSWORD": "\(!args.authEnabled)"
                if args.authEnabled {
                    "MONGODB_ROOT_USER": "secret://root-credentials/username?onchange=no-action"
                    "MONGODB_ROOT_PASSWORD": "secret://root-credentials/password?onchange=no-action"
                }
                "BACKUP_USER": "secret://backup-user-credentials/username"
                "BACKUP_PASSWORD": "secret://backup-user-credentials/password"
            }
            dependsOn: "mongodb-0"
        }
    }
}

// Backup job
if args.backupSchedule != "" {
    jobs: {
        "backup": {
            image: "\(args.imageName)"
            command: ["/acorn/scripts/backup.sh"]
            dirs: {
                "/backups":       "volume://mongodb-backup"
                "/acorn/scripts": "./scripts"
            }
            env: {
                "PTR_BACKUP": "\(args.ptrBackup)"
                "MONGODB_URI": "mongodb://\(localData.mongodbServerList)"
                "BACKUP_USER": "secret://backup-user-credentials/username"
                "BACKUP_PASSWORD": "secret://backup-user-credentials/password"
                "BACKUP_DB": "\(args.backupDB)"
                "BACKUP_COLLECTION": "\(args.backupCollection)"
            }
            schedule: args.backupSchedule
            dependsOn: ["mongodb-0", "create-backup-user"]
        }
    }
    secrets: {
        "backup-list": {
            type: "generated"
            params: {
                job: "backup"
            }
        }
    }
}

// Restore job from a specified backup
if args.backupToRestore != "" {
    jobs: {
        "restore-from-backup": {
            image: "\(args.imageName)"
            dirs: {
                "/backups":       "volume://mongodb-backup"
                "/acorn/scripts": "./scripts"
            }
            env: {
                "PTR_BACKUP": "\(args.ptrBackup)"
                "MONGODB_URI": "mongodb://\(localData.mongodbServerList)"
                "BACKUP_USER": "secret://backup-user-credentials/username"
                "BACKUP_PASSWORD": "secret://backup-user-credentials/password"
                "RESTORE_DB": "\(args.backupDB)"
                "RESTORE_COLLECTION": "\(args.backupCollection)"
            }
            command: ["/acorn/scripts/restore.sh"]
            dependsOn: ["mongodb-0", "create-backup-user"]
        }
    }
}

if args.backupSchedule != "" || args.backupToRestore != "" {
    volumes: {
        "mongodb-backup": {}
    }
}

secrets: {
    "root-credentials": {
        type: "basic"
        data: {
            username: "root"
            password: ""
        }
    }
    "db-user-credentials": {
        type: "basic"
        data: {
            username: "\(args.dbUserName)"
            password: ""
        }
    }
    "backup-user-credentials": {
        type: "basic"
        data: {
            username: "mongodbackup"
            password: ""
        }
    }
    if args.isReplicaSet {
        "replicaset-key-token": {
            type: "token"
        }
        "replicaset-key": {
            type: "template"
            data: {
                "key": "${secret://replicaset-key-token/token}"
            }
        }
    }
}