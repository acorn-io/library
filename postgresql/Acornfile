args: {
    // Number of replicas
	replicas: 1

	// The user credentials to be set
	postgresUser: "admin"

	postgresDb: "acorn"

	postgresReplicationUser: "replica"

	// It can be used to define location for the database files
	// pgData: "/var/lib/postgresql/data"
	pgData: "/acorn/data"

	// Backup Schedule
	backupSchedule: "@hourly"

	// Restore from Backup. Takes a backup file name
	restoreFromBackup: ""
}

for i in std.range(args.replicas) {
	containers: {
		if i != 0 {
			"postgresql-\(i)": {
				image:  "postgres:14.5-bullseye"
				//image: "bitnami/postgresql:14"
				ports: {
					internal: [
					//prometheus monitoring
						"9187:9187"
					]
					expose: "5433:5433"
				}
				env: {
					"POSTGRES_PASSWORD": "secret://root-credentials/password"
					"POSTGRES_USER": "secret://root-credentials/username"
					"POSTGRES_DB": "\(args.postgresDb)"
					"PGDATA": "\(args.pgData)"
				}
				dirs: {
					"\(args.pgData)": "volume://pgdata-\(i)"
					"/backup": "volume://backup"
				}
				files: {
					"/etc/postgresql/postgresql.conf": "secret://postgresstandby-conf/template"
				}
		    }
	    } 
		
		if i == 0 {
			"postgresql-master": {
				image:  "postgres:14.5-bullseye"
				//image: "bitnami/postgresql:14"
				ports: {
					internal: [
					//prometheus monitoring
						"9187:9187"
					]
					expose: "5432:5432"
				}
				env: {
					"POSTGRES_PASSWORD": "secret://root-credentials/password"
					"POSTGRES_USER": "secret://root-credentials/username"
					"POSTGRES_DB": "\(args.postgresDb)"
					"PGDATA": "\(args.pgData)"
				}
				dirs: {
					"\(args.pgData)": "volume://pgdata-0"
					"/backup": "volume://backup"
					"/acorn/scripts": "./scripts"
				}
				files: {
					"/etc/postgresql/postgresql.conf": "secret://postgresmaster-conf/template"
				}			
		    }
		}
	}

	// The volume for container 0 will always be present, even when scaled to 0 for restore.
	if i != 0 {
		volumes: {
			"pgdata-\(i)": {}
		}
	}
}

secrets: {
	"root-credentials": {
		type: "basic"
		data: {
			username: "\(args.postgresUser)"
		}
	}
	"postgresmaster-conf": {
		type: "template"
		data: {
			template: """
				    ### master configuration
					listen_addresses = '*'
					port = 5432
					shared_buffers = 128MB
					max_connections = 100
					dynamic_shared_memory_type = posix
					timezone = 'Etc/UTC'
					lc_messages = 'en_US.utf8'
					lc_monetary = 'en_US.utf8'
					lc_numeric = 'en_US.utf8'
					lc_time = 'en_US.utf8'
					default_text_search_config = 'pg_catalog.english'
					wal_level = replica
					hot_standby = on
					max_wal_senders = 10
					max_replication_slots = 10
					hot_standby_feedback = on
				"""
		}
	}
	"postgresstandby-conf": {
		type: "template"
		data: {
			template: """
				    ### master configuration
					listen_addresses = '*'
					port = 5432
					shared_buffers = 128MB
					max_connections = 100
					dynamic_shared_memory_type = posix
					timezone = 'Etc/UTC'
					lc_messages = 'en_US.utf8'
					lc_monetary = 'en_US.utf8'
					lc_numeric = 'en_US.utf8'
					lc_time = 'en_US.utf8'
					default_text_search_config = 'pg_catalog.english'
					wal_level = hot_standby
					standby_mode = on
				"""
		}
	}
}

volumes: {
	"pgdata-0": {}
	"backup": {}
}

if args.backupSchedule != "" {
	jobs: {
		"backup": {
			image: "postgres:14.5-bullseye"
			dirs: {
				"/acorn/scripts": "./scripts"
				"/backup": "volume://backup"
			}
			command: ["sh","/acorn/scripts/backup.sh"]
			env: {
				"POSTGRES_USER":     "secret://root-credentials/username"
				"POSTGRES_PASSWORD": "secret://root-credentials/password"
				"POSTGRES_DB": "\(args.postgresDb)"
			}
			schedule: "@hourly"
		}
	}
}

if args.restoreFromBackup != "" {
	jobs: {
		"restore-from-backup": {
			image: "postgres:14.5-bullseye"
			dirs: {
				"/acorn/scripts": "./scripts"
				"/backup": "volume://backup"
			}
			env: {
				"POSTGRES_USER":     "secret://root-credentials/username"
				"POSTGRES_PASSWORD": "secret://root-credentials/password"
				"POSTGRES_DB": "\(args.postgresDb)"
			}
			command: ["sh","/acorn/scripts/restore.sh", args.restoreFromBackup]
		}
	}
}